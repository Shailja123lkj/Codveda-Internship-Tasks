#This my first task of Advance level
#internship task from Codveda
#N-Queens Problem:No two queens can be in the same row.No two queens can be in the same column.No two queens can be on the same diagonal.

#Defining the solution
def print_solution(board):
    """Print the N-Queens solution as a chessboard."""
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
    print()

# Defining that is the queen safe by checking conditions
def is_safe(board, row, col, n):
    """Check if it's safe to place a queen at board[row][col]."""
    # Check column
    for i in range(row):
        if board[i][col]:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False

    # Check upper-right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j]:
            return False

    return True

# Defining to solve N queens problem
def solve_n_queens_util(board, row, n, solutions):
    """Utilize backtracking to find all solutions."""
    if row == n:
        solutions.append([row[:] for row in board])
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = True
            solve_n_queens_util(board, row + 1, n, solutions)
            board[row][col] = False  # Backtrack

def solve_n_queens(n):
    """Solve the N-Queens problem for a given size of board."""
    board = [[False for _ in range(n)] for _ in range(n)]
    solutions = []
    solve_n_queens_util(board, 0, n, solutions)
    return solutions


# Main Usage of this problem
if __name__ == "__main__":
    N = int(input("Enter the size of the chessboard (N): "))
    solutions = solve_n_queens(N)
    print(f"Found {len(solutions)} solutions for {N}-Queens problem.")
    for index, solution in enumerate(solutions, start=1):
        print(f"Solution {index}:")
        print_solution(solution)
